{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Tabs as BaseTabs } from \"@base-ui-components/react/tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype TabsVariant = \"capsule\" | \"underline\"\n\ntype TabsContext = {\n\tvariant: TabsVariant\n}\n\nconst TabsContext = React.createContext<TabsContext | null>(null)\n\nconst useTabs = () => {\n\tconst context = React.useContext(TabsContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useTabs must be used within a Tabs\")\n\t}\n\n\treturn context\n}\n\ninterface TabsProps\n\textends React.ComponentPropsWithoutRef<typeof BaseTabs.Root> {\n\tvariant?: TabsVariant\n}\n\nconst Tabs = React.forwardRef<HTMLDivElement, TabsProps>(\n\t({ variant = \"capsule\", ...props }, ref) => (\n\t\t<TabsContext.Provider value={{ variant }}>\n\t\t\t<BaseTabs.Root ref={ref} {...props} />\n\t\t</TabsContext.Provider>\n\t)\n)\nTabs.displayName = \"Tabs\"\n\nconst TabsList = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseTabs.List>\n>(({ className, children, ...props }, ref) => {\n\tconst { variant } = useTabs()\n\n\treturn (\n\t\t<BaseTabs.List\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"relative flex gap-1 text-sm font-medium\",\n\t\t\t\tvariant === \"capsule\" ? \"rounded-md border px-1\" : \"border-b\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t\t<TabIndicator />\n\t\t</BaseTabs.List>\n\t)\n})\nTabsList.displayName = \"TabsList\"\n\nconst Tab = React.forwardRef<\n\tHTMLButtonElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseTabs.Tab>\n>(({ className, ...props }, ref) => (\n\t<BaseTabs.Tab\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t\"z-[1] min-h-10 w-full text-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n\t\t\tclassName\n\t\t)}\n\t\t{...props}\n\t/>\n))\nTab.displayName = \"Tab\"\n\nconst TabIndicator = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseTabs.Indicator>\n>(({ className, ...props }, ref) => {\n\tconst { variant } = useTabs()\n\treturn (\n\t\t<BaseTabs.Indicator\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"absolute left-0 w-[var(--active-tab-width)] -translate-y-1/2 translate-x-[var(--active-tab-left)] transition-all duration-200 ease-in-out\",\n\t\t\t\tvariant === \"underline\"\n\t\t\t\t\t? \"top-full z-10 h-px bg-primary\"\n\t\t\t\t\t: \"top-1/2 h-[calc(var(--active-tab-height)-0.5rem)] rounded-md bg-muted\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t)\n})\nTabIndicator.displayName = \"TabIndicator\"\n\nconst TabContent = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseTabs.Panel>\n>(({ className, ...props }, ref) => (\n\t<BaseTabs.Panel\n\t\tref={ref}\n\t\tclassName={cn(\"mt-2 flex-1 rounded-md border p-4\", className)}\n\t\t{...props}\n\t/>\n))\nTabContent.displayName = \"TabContent\"\n\nexport { Tabs, TabsList, Tab, TabContent }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}