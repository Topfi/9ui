{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "phone-input",
	"type": "registry:ui",
	"dependencies": ["react-phone-number-input"],
	"registryDependencies": [
		"button",
		"command",
		"input",
		"popover",
		"scroll-area"
	],
	"files": [
		{
			"path": "ui/phone-input.tsx",
			"content": "import * as React from \"react\"\nimport { CheckIcon, ChevronsUpDown } from \"lucide-react\"\nimport * as BasePhoneInput from \"react-phone-number-input\"\nimport flags from \"react-phone-number-input/flags\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"@/components/ui/command\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype PhoneInputProps = Omit<\n\tReact.ComponentProps<\"input\">,\n\t\"onChange\" | \"value\" | \"ref\"\n> &\n\tOmit<BasePhoneInput.Props<typeof BasePhoneInput.default>, \"onChange\"> & {\n\t\tonChange?: (value: BasePhoneInput.Value) => void\n\t}\n\nfunction PhoneInput({ className, onChange, value, ...props }: PhoneInputProps) {\n\treturn (\n\t\t<BasePhoneInput.default\n\t\t\tclassName={cn(\n\t\t\t\t\"flex\",\n\t\t\t\tprops[\"aria-invalid\"] &&\n\t\t\t\t\t\"[&_*[data-slot=popover-trigger]]:border-destructive [&_*[data-slot=popover-trigger]]:ring-destructive/50\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tflagComponent={FlagComponent}\n\t\t\tcountrySelectComponent={CountrySelect}\n\t\t\tinputComponent={InputComponent}\n\t\t\tsmartCaret={false}\n\t\t\tvalue={value || undefined}\n\t\t\tonChange={(value) => onChange?.(value || (\"\" as BasePhoneInput.Value))}\n\t\t\t{...props}\n\t\t/>\n\t)\n}\n\nfunction InputComponent({\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof Input>) {\n\treturn <Input className={cn(\"rounded-s-none\", className)} {...props} />\n}\n\ntype CountryEntry = { label: string; value: BasePhoneInput.Country | undefined }\n\ntype CountrySelectProps = {\n\tdisabled?: boolean\n\tvalue: BasePhoneInput.Country\n\toptions: CountryEntry[]\n\tonChange: (country: BasePhoneInput.Country) => void\n}\n\nfunction CountrySelect({\n\tdisabled,\n\tvalue: selectedCountry,\n\toptions: countryList,\n\tonChange,\n\t...other\n}: CountrySelectProps) {\n\tconsole.log({ other })\n\tconst scrollAreaRef = React.useRef<HTMLDivElement>(null)\n\tconst viewportRef = React.useRef<HTMLElement | null>(null)\n\tconst [searchValue, setSearchValue] = React.useState(\"\")\n\tconst [isOpen, setIsOpen] = React.useState(false)\n\n\treturn (\n\t\t<Popover\n\t\t\topen={isOpen}\n\t\t\tmodal\n\t\t\tonOpenChange={(open) => {\n\t\t\t\tsetIsOpen(open)\n\t\t\t\tif (open) {\n\t\t\t\t\tsetSearchValue(\"\")\n\t\t\t\t\tif (scrollAreaRef.current) {\n\t\t\t\t\t\tviewportRef.current = scrollAreaRef.current.querySelector(\n\t\t\t\t\t\t\t\"[data-slot=scroll-area-viewport]\"\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<PopoverTrigger\n\t\t\t\trender={(props) => (\n\t\t\t\t\t<Button\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tclassName=\"flex gap-1 rounded-s-md rounded-e-none border-r-0 px-3 focus:z-10\"\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t>\n\t\t\t\t\t\t<FlagComponent\n\t\t\t\t\t\t\tcountry={selectedCountry}\n\t\t\t\t\t\t\tcountryName={selectedCountry}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ChevronsUpDown className={cn(\"-mr-1\", disabled && \"hidden\")} />\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<PopoverContent className=\"w-[300px] p-0\" arrow={false}>\n\t\t\t\t<Command>\n\t\t\t\t\t<CommandInput\n\t\t\t\t\t\tvalue={searchValue}\n\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\tsetSearchValue(value)\n\t\t\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\t\t\tif (viewportRef.current) {\n\t\t\t\t\t\t\t\t\tviewportRef.current.scrollTop = 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Search country...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t<ScrollArea ref={scrollAreaRef} className=\"h-72\">\n\t\t\t\t\t\t\t<CommandEmpty>No country found.</CommandEmpty>\n\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t{countryList.map(({ value, label }) =>\n\t\t\t\t\t\t\t\t\tvalue ? (\n\t\t\t\t\t\t\t\t\t\t<CountrySelectOption\n\t\t\t\t\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\t\t\t\t\tcountry={value}\n\t\t\t\t\t\t\t\t\t\t\tcountryName={label}\n\t\t\t\t\t\t\t\t\t\t\tselectedCountry={selectedCountry}\n\t\t\t\t\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t\t\t\t\t\tonSelectComplete={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t)\n}\n\ninterface CountrySelectOptionProps extends BasePhoneInput.FlagProps {\n\tselectedCountry: BasePhoneInput.Country\n\tonChange: (country: BasePhoneInput.Country) => void\n\tonSelectComplete: () => void\n}\n\nfunction CountrySelectOption({\n\tcountry,\n\tcountryName,\n\tselectedCountry,\n\tonChange,\n\tonSelectComplete,\n}: CountrySelectOptionProps) {\n\tconst handleSelect = () => {\n\t\tonChange(country)\n\t\tonSelectComplete()\n\t}\n\n\treturn (\n\t\t<CommandItem className=\"gap-2\" onSelect={handleSelect}>\n\t\t\t<FlagComponent country={country} countryName={countryName} />\n\t\t\t<span className=\"flex-1 text-sm\">{countryName}</span>\n\t\t\t<span className=\"text-foreground/50 text-sm\">{`+${BasePhoneInput.getCountryCallingCode(country)}`}</span>\n\t\t\t<CheckIcon\n\t\t\t\tclassName={`ml-auto size-4 shrink-0 ${country === selectedCountry ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t/>\n\t\t</CommandItem>\n\t)\n}\n\nfunction FlagComponent({ country, countryName }: BasePhoneInput.FlagProps) {\n\tconst Flag = flags[country]\n\n\treturn (\n\t\t<span className=\"bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-sm [&_svg:not([class*='size-'])]:size-full\">\n\t\t\t{Flag && <Flag title={countryName} />}\n\t\t</span>\n\t)\n}\n\nexport { PhoneInput }\n",
			"type": "registry:ui",
			"target": ""
		}
	]
}
